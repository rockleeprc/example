package exam.aop.proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import org.junit.Test;
import org.springframework.cglib.proxy.Enhancer;
import org.springframework.cglib.proxy.MethodInterceptor;
import org.springframework.cglib.proxy.MethodProxy;

import exam.aop.proxy.interfaces.IBusiness;
import exam.aop.proxy.interfaces.impl.BusinessImpl;

public class BusinessProxy {

	@Test
	public void cglibProxy() {
		final IBusiness target = new BusinessImpl();
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(target.getClass());
		enhancer.setCallback(new MethodInterceptor() {

			public Object intercept(Object arg0, Method arg1, Object[] arg2, MethodProxy arg3) throws Throwable {
				// TODO Auto-generated method stub
				return null;
			}
			
		
		});
	}

	/**
	 * jdk动态代理，针对接口
	 */
	@Test
	public void jdkProxy() {
		final IBusiness target = new BusinessImpl();
		IBusiness proxy = (IBusiness) Proxy.newProxyInstance(target.getClass().getClassLoader(),
				target.getClass().getInterfaces(), new InvocationHandler() {

					public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
						System.out.println("jdk proxy starting...");
						System.out.println(target.getClass().getName() + "." + method.getName());
						// invoke 调用被代理的对象
						Object obj = method.invoke(target, args);
						return obj;
					}
				});
		proxy.doSomething();
	}

}
